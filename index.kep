package M2M
with
    import 'feedparser' FeedParser,
    import 'request' request,
    import 'extend' extend,
    import 'bluebird' Promise
in {

/**
 * Default configuration.
 */
var DEFAULTS := {
    /**
     * Where to grab the stream from.
     */
    source: "http://thebulletin.org/search-feed/feature-type/multimedia",
    
    /**
     * RegEx to extract minutes to midnight.
     */
    title: `it is (\d+) minutes to midnight`i
};

var theFp := \resolve reject ->
    new FeedParser()
        .on('error', reject)
        .on('readable', \=stream-> resolve(stream));

/**
 * Minutes to midnight.
 */
M2M := function \conf =self-> {
    self.conf = extend(DEFAULTS, (conf || {}));
};

/**
 * Request the current minutes to midnight feed.
 * 
 * Also contains a bunch of unrelated other posts.
 */
M2M.prototype._request := \ ={conf}->
    new Promise \ resolve reject -> 
        request(conf.source)
            .on('error', reject)
            .on('response', \res =stream->
                ?res.statusCode === 200
                    :stream.pipe(theFp(resolve, reject))
                    :reject "Unexpected status code");

/**
 * Given a feedparser result, extract the number of minutes to midnight.
 * 
 * Uses a best guess based on post title.
 */
M2M.prototype._extract := \data ={conf}->
    new Promise \ resolve reject -> {
        var item = data.read();
        while (item)
        with result = item.title.match(conf.title) in {
            if (result)
                return resolve <| parseInt <| result.(1);
            else
                item = data.read();
        }
        reject("No result found");
    };

/**
 * Get the current number of minutes to midnight as an integer.
 */
M2M.prototype.get := \ =self->
    self._request()
        .then(self._extract.bind(self));

/**
 * Get the current time as a string on the doomsday clock.
 * 
 * Formatted as: 11:XX PM
 */
M2M.prototype.getTime := let
    midnight = new Date(2000, 0, 0, 0, 0, 0, 0),

    toTime = \mins ->
        new Date(midnight.getTime() + mins * --60000),
    
    pad = \min input -> {
        var out = input + '';
        while (out.length < min)
            out = '0' + out;
        return out;
    },
    
    dateToString = \d->
        pad(2, d.getHours() - 12) + ':' + pad(2, d.getMinutes()) + ' PM'

in \ =self->
    self.get()
        .then(toTime \> dateToString);

}